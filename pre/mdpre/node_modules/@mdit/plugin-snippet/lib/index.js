import P from"node:fs";import{NEWLINE_RE as R,dedent as F}from"@mdit/helper";import k from"upath";const M=[/^\/\/ ?#?((?:end)?region) ([\w*-]+)$/,/^\/\* ?#((?:end)?region) ([\w*-]+) ?\*\/$/,/^#pragma ((?:end)?region) ([\w*-]+)$/,/^<!-- #?((?:end)?region) ([\w*-]+) -->$/,/^#((?:End )Region) ([\w*-]+)$/,/^::#((?:end)region) ([\w*-]+)$/,/^# ?((?:end)?region) ([\w*-]+)$/],N=/^([^#{]*)((?:[#{}].*)?)$/,j=/^(?:#([\w-]+))?(?: ?(?:{(\d+(?:[,-]\d+)*)? ?(\S+)?}))?$/,S=(n,i,e,r=!1)=>{const[c,t,o]=i.exec(n.trimStart())??[];return!!(c&&t&&o===e&&t.match(r?/^[Ee]nd ?[rR]egion$/:/^[rR]egion$/))},C=(n,i)=>{let e=null,r=-1;for(const[c,t]of n.entries())if(e===null){for(const o of M)if(S(t,o,i)){r=c+1,e=o;break}}else if(S(t,e,i,!0))return{start:r,end:c,regexp:e};return null},I=({currentPath:n,resolvePath:i})=>(e,r,c,t)=>{const o=e.env,f=e.bMarks[r]+e.tShift[r],p=e.eMarks[r];for(let $=0;$<3;++$)if(e.src.charCodeAt(f+$)!==60||f+$>=p)return!1;if(t)return!0;const w=f+3,l=e.skipSpacesBack(p,f),s=n(o),d=e.src.slice(w,l).trim(),[,u,m]=N.exec(d),[,a="",g="",v=""]=j.exec(m)??[],x=s?k.dirname(s):".",b=i(u.trim(),x),E=k.resolve(x,b),y=k.extname(E).slice(1);e.line=r+1;const h=e.push("fence","code",0);return h.info=`${v||y}${g?`{${g}}`:""}`,h.markup="```",h.meta={src:E,region:a},h.map=[r,r+1],!0},_=(n,i)=>{const{currentPath:e,resolvePath:r=t=>t}=i??{};if(typeof e!="function")throw new Error('[@mdit/plugin-snippet]: "currentPath" is required');n.block.ruler.before("fence","snippet",I({currentPath:e,resolvePath:r}));const c=n.renderer.rules.fence;n.renderer.rules.fence=(t,o,f,p,w)=>{const l=t[o],{src:s,region:d}=l.meta??={};if(s)if(P.lstatSync(s,{throwIfNoEntry:!1})?.isFile()){let u=P.readFileSync(s,"utf8");if(d){const m=u.split(R),a=C(m,d);a&&(u=F(m.slice(a.start,a.end).filter(g=>!a.regexp.test(g.trim())).join(`
`)))}l.content=u,(p.snippetFiles??=[]).push(s)}else l.content=`Code snippet path not found: ${s}`,l.info="";return c(t,o,f,p,w)}};export{_ as snippet};
//# sourceMappingURL=index.js.map
