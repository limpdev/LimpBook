{"version":3,"file":"index.js","sources":["../src/plugin.ts"],"sourcesContent":["import fs from \"node:fs\";\n\nimport { NEWLINE_RE, dedent } from \"@mdit/helper\";\nimport type { Options, PluginWithOptions } from \"markdown-it\";\nimport type { RuleBlock } from \"markdown-it/lib/parser_block.mjs\";\nimport type Renderer from \"markdown-it/lib/renderer.mjs\";\nimport type Token from \"markdown-it/lib/token.mjs\";\nimport path from \"upath\";\n\nimport type { MarkdownItSnippetOptions } from \"./options.js\";\nimport type { SnippetEnv } from \"./types.js\";\n\nconst REGIONS_RE = [\n  /^\\/\\/ ?#?((?:end)?region) ([\\w*-]+)$/, // javascript, typescript, java\n  /^\\/\\* ?#((?:end)?region) ([\\w*-]+) ?\\*\\/$/, // css, less, scss\n  /^#pragma ((?:end)?region) ([\\w*-]+)$/, // C, C++\n  /^<!-- #?((?:end)?region) ([\\w*-]+) -->$/, // HTML, markdown\n  /^#((?:End )Region) ([\\w*-]+)$/, // Visual Basic\n  /^::#((?:end)region) ([\\w*-]+)$/, // Bat\n  /^# ?((?:end)?region) ([\\w*-]+)$/, // C#, PHP, Powershell, Python, perl & misc\n];\nconst SNIPPET_RE = /^([^#{]*)((?:[#{}].*)?)$/;\nconst SNIPPET_META_RE =\n  /^(?:#([\\w-]+))?(?: ?(?:{(\\d+(?:[,-]\\d+)*)? ?(\\S+)?}))?$/;\n\nconst testLine = (\n  line: string,\n  regexp: RegExp,\n  regionName: string,\n  end = false,\n): boolean => {\n  const [full, tag, name] = regexp.exec(line.trimStart()) ?? [];\n\n  return Boolean(\n    full &&\n      tag &&\n      name === regionName &&\n      tag.match(end ? /^[Ee]nd ?[rR]egion$/ : /^[rR]egion$/),\n  );\n};\n\nconst findRegion = (\n  lines: string[],\n  regionName: string,\n): { start: number; end: number; regexp: RegExp } | null => {\n  let regexp: RegExp | null = null;\n  let start = -1;\n\n  for (const [lineId, line] of lines.entries())\n    if (regexp === null) {\n      for (const reg of REGIONS_RE)\n        if (testLine(line, reg, regionName)) {\n          start = lineId + 1;\n          regexp = reg;\n          break;\n        }\n    } else if (testLine(line, regexp, regionName, true)) {\n      return { start, end: lineId, regexp };\n    }\n\n  return null;\n};\n\nconst getSnippetRule =\n  ({\n    currentPath,\n    resolvePath,\n  }: Required<MarkdownItSnippetOptions>): RuleBlock =>\n  (state, startLine, _endLine, silent) => {\n    const env = state.env as SnippetEnv;\n    const pos = state.bMarks[startLine] + state.tShift[startLine];\n    const max = state.eMarks[startLine];\n\n    for (let index = 0; index < 3; ++index) {\n      if (\n        state.src.charCodeAt(pos + index) !== 60 /* < */ ||\n        pos + index >= max\n      )\n        return false;\n    }\n\n    if (silent) return true;\n\n    const start = pos + 3;\n    const end = state.skipSpacesBack(max, pos);\n\n    /**\n     * raw path format: \"/path/to/file.extension#region {meta}\"\n     *    where #region and {meta} are optional\n     *    and meta can be like '1,2,4-6 lang', 'lang' or '1,2,4-6'\n     *\n     * captures: ['/path/to/file.extension', 'extension', '#region', '{meta}']\n     */\n    const currentFilePath = currentPath(env);\n    const snippetContent = state.src.slice(start, end).trim();\n    // the regexp supposes to match any possible snippet format\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const [, snippetPath, snippetMeta] = SNIPPET_RE.exec(snippetContent)!;\n    const [, region = \"\", lines = \"\", lang = \"\"] =\n      SNIPPET_META_RE.exec(snippetMeta) ?? [];\n\n    const cwd = currentFilePath ? path.dirname(currentFilePath) : \".\";\n    const resolvedPath = resolvePath(snippetPath.trim(), cwd);\n    const absolutePath = path.resolve(cwd, resolvedPath);\n    const ext = path.extname(absolutePath).slice(1);\n\n    state.line = startLine + 1;\n\n    const token = state.push(\"fence\", \"code\", 0);\n\n    token.info = `${lang || ext}${lines ? `{${lines}}` : \"\"}`;\n    token.markup = \"```\";\n    token.meta = {\n      src: absolutePath,\n      region,\n    };\n    token.map = [startLine, startLine + 1];\n\n    return true;\n  };\n\nexport const snippet: PluginWithOptions<MarkdownItSnippetOptions> = (\n  md,\n  options,\n) => {\n  const { currentPath, resolvePath = (path: string): string => path } =\n    options ?? {};\n\n  if (typeof currentPath !== \"function\")\n    throw new Error('[@mdit/plugin-snippet]: \"currentPath\" is required');\n\n  md.block.ruler.before(\n    \"fence\",\n    \"snippet\",\n    getSnippetRule({ currentPath, resolvePath }),\n  );\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const originalFence = md.renderer.rules.fence!;\n\n  md.renderer.rules.fence = (\n    tokens: Token[],\n    index: number,\n    options: Options,\n    env: SnippetEnv,\n    self: Renderer,\n  ): string => {\n    const token = tokens[index];\n    const { src, region } = (token.meta ??= {}) as {\n      src: string;\n      region: string;\n    };\n\n    if (src)\n      if (fs.lstatSync(src, { throwIfNoEntry: false })?.isFile()) {\n        let content = fs.readFileSync(src, \"utf8\");\n\n        if (region) {\n          const lines = content.split(NEWLINE_RE);\n          const regionInfo = findRegion(lines, region);\n\n          if (regionInfo)\n            content = dedent(\n              lines\n                .slice(regionInfo.start, regionInfo.end)\n                .filter((line: string) => !regionInfo.regexp.test(line.trim()))\n                .join(\"\\n\"),\n            );\n        }\n\n        token.content = content;\n\n        (env.snippetFiles ??= []).push(src);\n      } else {\n        token.content = `Code snippet path not found: ${src}`;\n        token.info = \"\";\n      }\n\n    return originalFence(tokens, index, options, env, self);\n  };\n};\n"],"names":["REGIONS_RE","SNIPPET_RE","SNIPPET_META_RE","testLine","line","regexp","regionName","end","full","tag","name","findRegion","lines","start","lineId","reg","getSnippetRule","currentPath","resolvePath","state","startLine","_endLine","silent","env","pos","max","index","currentFilePath","snippetContent","snippetPath","snippetMeta","region","lang","cwd","path","resolvedPath","absolutePath","ext","token","snippet","md","options","originalFence","tokens","self","src","fs","content","NEWLINE_RE","regionInfo","dedent"],"mappings":"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"}