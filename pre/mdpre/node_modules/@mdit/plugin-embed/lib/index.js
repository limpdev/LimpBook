import{isSpace as b}from"markdown-it/lib/common/utils.mjs";const m=(t,r)=>{if(t.charCodeAt(r)!==123||t.charCodeAt(r+1)!==37)return!1;let c=r-1,o=0;for(;c>=0&&t.charCodeAt(c)===92;)o++,c--;return o%2!==1},h=(t,r)=>t.charCodeAt(r)===37&&t.charCodeAt(r+1)===125,g=t=>(r,c)=>{const o=r.pos,a=r.src.length;if(a-o<5||!m(r.src,o))return!1;let e=o+2;for(;e<a&&b(r.src.charCodeAt(e));)e++;let s=e,l=!1;for(;s+1<a;s++){if(m(r.src,s))return!1;if(h(r.src,s)){l=!0;break}}if(!l)return!1;let n=e+1;for(;n<s&&!b(r.src.charCodeAt(n));)n++;const f=r.src.slice(e,n);if(!t.has(f))return!1;if(!c){const i=r.push("embed_inline","embed",0),p=n?r.src.slice(n+1,s).trim().replace(/\\{%/g,"{%").replace(/%\\}/g,"%}"):"";i.markup="{% %}",i.info=f,i.content=p}return r.pos=s+2,!0},A=t=>(r,c,o,a)=>{const e=r.bMarks[c]+r.tShift[c];let s=r.eMarks[c];const{src:l}=r;if(s-e<5||r.src.charCodeAt(e)!==123||r.src.charCodeAt(e+1)!==37)return!1;s=r.skipSpacesBack(s,e);const n=s-2;if(!h(l,n))return!1;let f=e+2;for(;f<n&&b(r.src.charCodeAt(f));)f++;let i=-1;for(let u=f;u+1<n;u++){if(m(r.src,u)||h(r.src,u))return!1;i===-1&&b(r.src.charCodeAt(u))&&(i=u)}const p=i===-1?r.src.slice(f,n+1).trimEnd():r.src.slice(f,i);if(!t.has(p))return!1;if(a)return!0;const k=i===-1?"":r.src.slice(i+1,n).trim().replace(/\\{%/g,"{%").replace(/%\\}/g,"%}"),d=r.push("embed_block","embed",0);return d.block=!0,d.info=p,d.content=k,d.map=[c,c+1],d.markup="{% %}",r.line=c+1,!0},_=(t,r)=>{if(typeof r!="object"||!Array.isArray(r.config))throw new Error("[@mdit/plugin-embed]: config is required and must be an array.");const c=t,o=c.__embedMap??=new Map,a=c.__inlineEmbedMap??=new Map;r.config.forEach(e=>{o.set(e.name,e),e.allowInline&&a.set(e.name,e)}),"embed_block"in t.renderer.rules||(t.block.ruler.before("paragraph","embed_block",A(o),{alt:["paragraph","reference","blockquote","list"]}),t.renderer.rules.embed_block=(e,s)=>{const l=e[s];return o.get(l.info).setup(l.content)}),a.size&&!("embed_inline"in t.renderer.rules)&&(t.inline.ruler.before("emphasis","embed_inline",g(a)),t.renderer.rules.embed_inline=(e,s)=>{const l=e[s];return a.get(l.info).setup(l.content)})};export{_ as embed};
//# sourceMappingURL=index.js.map
