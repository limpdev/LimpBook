function p(t){switch(t){case 9:case 32:return!0}return!1}const m=(t,e)=>{if(t.charCodeAt(e)!==123||t.charCodeAt(e+1)!==37)return!1;let c=e-1,a=0;for(;c>=0&&t.charCodeAt(c)===92;)a++,c--;return a%2!==1},h=(t,e)=>t.charCodeAt(e)===37&&t.charCodeAt(e+1)===125,g=t=>(e,c)=>{const a=e.pos,o=e.src.length;if(o-a<5||!m(e.src,a))return!1;let r=a+2;for(;r<o&&p(e.src.charCodeAt(r));)r++;let s=r,l=!1;for(;s+1<o;s++){if(m(e.src,s))return!1;if(h(e.src,s)){l=!0;break}}if(!l)return!1;let n=r+1;for(;n<s&&!p(e.src.charCodeAt(n));)n++;const f=e.src.slice(r,n);if(!t.has(f))return!1;if(!c){const i=e.push("embed_inline","embed",0),b=n?e.src.slice(n+1,s).trim().replace(/\\{%/g,"{%").replace(/%\\}/g,"%}"):"";i.markup="{% %}",i.info=f,i.content=b}return e.pos=s+2,!0},A=t=>(e,c,a,o)=>{const r=e.bMarks[c]+e.tShift[c];let s=e.eMarks[c];const{src:l}=e;if(s-r<5||e.src.charCodeAt(r)!==123||e.src.charCodeAt(r+1)!==37)return!1;s=e.skipSpacesBack(s,r);const n=s-2;if(!h(l,n))return!1;let f=r+2;for(;f<n&&p(e.src.charCodeAt(f));)f++;let i=-1;for(let u=f;u+1<n;u++){if(m(e.src,u)||h(e.src,u))return!1;i===-1&&p(e.src.charCodeAt(u))&&(i=u)}const b=i===-1?e.src.slice(f,n+1).trimEnd():e.src.slice(f,i);if(!t.has(b))return!1;if(o)return!0;const k=i===-1?"":e.src.slice(i+1,n).trim().replace(/\\{%/g,"{%").replace(/%\\}/g,"%}"),d=e.push("embed_block","embed",0);return d.block=!0,d.info=b,d.content=k,d.map=[c,c+1],d.markup="{% %}",e.line=c+1,!0},_=(t,e)=>{if(typeof e!="object"||!Array.isArray(e.config))throw new Error("[@mdit/plugin-embed]: config is required and must be an array.");const c=t,a=c.__embedMap??=new Map,o=c.__inlineEmbedMap??=new Map;e.config.forEach(r=>{a.set(r.name,r),r.allowInline&&o.set(r.name,r)}),"embed_block"in t.renderer.rules||(t.block.ruler.before("paragraph","embed_block",A(a),{alt:["paragraph","reference","blockquote","list"]}),t.renderer.rules.embed_block=(r,s)=>{const l=r[s];return a.get(l.info).setup(l.content)}),o.size&&!("embed_inline"in t.renderer.rules)&&(t.inline.ruler.before("emphasis","embed_inline",g(o)),t.renderer.rules.embed_inline=(r,s)=>{const l=r[s];return o.get(l.info).setup(l.content)})};export{_ as embed};
//# sourceMappingURL=browser.js.map
